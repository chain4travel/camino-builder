/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Exchange, ExchangeInterface } from "../Exchange";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenA",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenB",
    outputs: [
      {
        internalType: "contract ITokenB",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106dd3803806106dd8339818101604052810190610032919061011d565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100ea826100bf565b9050919050565b6100fa816100df565b811461010557600080fd5b50565b600081519050610117816100f1565b92915050565b60008060408385031215610134576101336100ba565b5b600061014285828601610108565b925050602061015385828601610108565b9150509250929050565b6105718061016c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630fc63d10146100515780635f64b55b1461006f57806394b918de1461008d578063c884ef83146100a9575b600080fd5b6100596100d9565b6040516100669190610304565b60405180910390f35b6100776100fd565b6040516100849190610340565b60405180910390f35b6100a760048036038101906100a29190610396565b610123565b005b6100c360048036038101906100be9190610401565b610265565b6040516100d09190610449565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161018093929190610482565b602060405180830381600087803b15801561019a57600080fd5b505af11580156101ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d291906104e5565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610230929190610512565b600060405180830381600087803b15801561024a57600080fd5b505af115801561025e573d6000803e3d6000fd5b5050505050565b60026020528060005260406000206000915054906101000a900460ff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006102ca6102c56102c084610285565b6102a5565b610285565b9050919050565b60006102dc826102af565b9050919050565b60006102ee826102d1565b9050919050565b6102fe816102e3565b82525050565b600060208201905061031960008301846102f5565b92915050565b600061032a826102d1565b9050919050565b61033a8161031f565b82525050565b60006020820190506103556000830184610331565b92915050565b600080fd5b6000819050919050565b61037381610360565b811461037e57600080fd5b50565b6000813590506103908161036a565b92915050565b6000602082840312156103ac576103ab61035b565b5b60006103ba84828501610381565b91505092915050565b60006103ce82610285565b9050919050565b6103de816103c3565b81146103e957600080fd5b50565b6000813590506103fb816103d5565b92915050565b6000602082840312156104175761041661035b565b5b6000610425848285016103ec565b91505092915050565b60008115159050919050565b6104438161042e565b82525050565b600060208201905061045e600083018461043a565b92915050565b61046d816103c3565b82525050565b61047c81610360565b82525050565b60006060820190506104976000830186610464565b6104a46020830185610464565b6104b16040830184610473565b949350505050565b6104c28161042e565b81146104cd57600080fd5b50565b6000815190506104df816104b9565b92915050565b6000602082840312156104fb576104fa61035b565b5b6000610509848285016104d0565b91505092915050565b60006040820190506105276000830185610464565b6105346020830184610473565b939250505056fea26469706673582212208c7bbf9036fc16bf52c22b8d13e3946be068bd273574ae96efa04d1aa46efb8664736f6c63430008090033";

export class Exchange__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _tokenA: string,
    _tokenB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Exchange> {
    return super.deploy(_tokenA, _tokenB, overrides || {}) as Promise<Exchange>;
  }
  getDeployTransaction(
    _tokenA: string,
    _tokenB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_tokenA, _tokenB, overrides || {});
  }
  attach(address: string): Exchange {
    return super.attach(address) as Exchange;
  }
  connect(signer: Signer): Exchange__factory {
    return super.connect(signer) as Exchange__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExchangeInterface {
    return new utils.Interface(_abi) as ExchangeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Exchange {
    return new Contract(address, _abi, signerOrProvider) as Exchange;
  }
}
