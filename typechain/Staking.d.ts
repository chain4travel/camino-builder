/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface StakingInterface extends ethers.utils.Interface {
  functions: {
    "DAILY_PCT_REWARD()": FunctionFragment;
    "MIN_STAKING_AMOUNT()": FunctionFragment;
    "MIN_TIME()": FunctionFragment;
    "calculateRewardsEarned(address)": FunctionFragment;
    "dailyPctReward()": FunctionFragment;
    "endTime()": FunctionFragment;
    "getStakingRewards()": FunctionFragment;
    "rewardAmount()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakedBalances(address)": FunctionFragment;
    "startTime()": FunctionFragment;
    "token()": FunctionFragment;
    "totalRewardsAllocated()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "unstake()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DAILY_PCT_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_STAKING_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MIN_TIME", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateRewardsEarned",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyPctReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStakingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakedBalances",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalRewardsAllocated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unstake", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DAILY_PCT_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_STAKING_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MIN_TIME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewardsEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyPctReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsAllocated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {};
}

export class Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingInterface;

  functions: {
    DAILY_PCT_REWARD(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_STAKING_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_TIME(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateRewardsEarned(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dailyPctReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStakingRewards(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    rewardAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalRewardsAllocated(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DAILY_PCT_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_STAKING_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_TIME(overrides?: CallOverrides): Promise<BigNumber>;

  calculateRewardsEarned(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dailyPctReward(overrides?: CallOverrides): Promise<BigNumber>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  getStakingRewards(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  rewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  totalRewardsAllocated(overrides?: CallOverrides): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  unstake(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DAILY_PCT_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_STAKING_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRewardsEarned(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyPctReward(overrides?: CallOverrides): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingRewards(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    rewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakedBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    totalRewardsAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DAILY_PCT_REWARD(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_STAKING_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRewardsEarned(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyPctReward(overrides?: CallOverrides): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    getStakingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    rewardAmount(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardsAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DAILY_PCT_REWARD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_STAKING_AMOUNT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateRewardsEarned(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dailyPctReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakingRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRewardsAllocated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
