/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Staking, StakingInterface } from "../Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_rewardAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DAILY_PCT_REWARD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_STAKING_AMOUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_TIME",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
    ],
    name: "calculateRewardsEarned",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dailyPctReward",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "endTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStakingRewards",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakedBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalRewardsAllocated",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012b3380380620012b383398181016040528101906200003791906200015d565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260038190555062011940426200008f9190620001d3565b60048190555080600681905550505062000230565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000d682620000a9565b9050919050565b6000620000ea82620000c9565b9050919050565b620000fc81620000dd565b81146200010857600080fd5b50565b6000815190506200011c81620000f1565b92915050565b6000819050919050565b620001378162000122565b81146200014357600080fd5b50565b60008151905062000157816200012c565b92915050565b60008060408385031215620001775762000176620000a4565b5b600062000187858286016200010b565b92505060206200019a8582860162000146565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620001e08262000122565b9150620001ed8362000122565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115620002255762000224620001a4565b5b828201905092915050565b61107380620002406000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063817b1cd211610097578063a694fc3a11610066578063a694fc3a14610255578063ac60147414610271578063f7b2a7be1461028f578063fc0c546a146102ad576100f5565b8063817b1cd2146101ca5780638b086764146101e85780638ff07b5b14610218578063986768b214610236576100f5565b80632def6620116100d35780632def6620146101665780633197cbb61461017057806341744f7b1461018e57806378e97925146101ac576100f5565b80631460fa87146100fa57806326521ff41461012a57806326ecc9fc14610148575b600080fd5b610114600480360381019061010f9190610a00565b6102cb565b6040516101219190610a46565b60405180910390f35b6101326102e3565b60405161013f9190610a46565b60405180910390f35b6101506102e9565b60405161015d9190610a46565b60405180910390f35b61016e6102ee565b005b6101786105b2565b6040516101859190610a46565b60405180910390f35b6101966105b8565b6040516101a39190610a46565b60405180910390f35b6101b46105be565b6040516101c19190610a46565b60405180910390f35b6101d26105c4565b6040516101df9190610a46565b60405180910390f35b61020260048036038101906101fd9190610a00565b6105ca565b60405161020f9190610a46565b60405180910390f35b610220610707565b60405161022d9190610a46565b60405180910390f35b61023e61070e565b60405161024c929190610a61565b60405180910390f35b61026f600480360381019061026a9190610ab6565b610732565b005b610279610967565b6040516102869190610a46565b60405180910390f35b610297610973565b6040516102a49190610a46565b60405180910390f35b6102b5610979565b6040516102c29190610b42565b60405180910390f35b60026020528060005260406000206000915090505481565b60055481565b603281565b60006102f9336105ca565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518363ffffffff1660e01b8152600401610395929190610b6c565b602060405180830381600087803b1580156103af57600080fd5b505af11580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e79190610bcd565b610426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041d90610c57565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610481929190610b6c565b602060405180830381600087803b15801561049b57600080fd5b505af11580156104af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d39190610bcd565b610512576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050990610c57565b60405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160008282546105639190610ca6565b925050819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60045481565b60075481565b60035481565b60015481565b6000600454421015610611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060890610d26565b60405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068a90610d92565b60405180910390fd5b6000620151806127106032600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106e89190610db2565b6106f29190610e3b565b6106fc9190610e3b565b905080915050919050565b62093a8081565b60008060006007546006546107239190610ca6565b90506006548192509250509091565b600354421015610777576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076e90610eb8565b60405180910390fd5b6004544211156107bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b390610f24565b60405180910390fd5b678ac7230489e80000811015610807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fe90610f90565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161086493929190610fb0565b602060405180830381600087803b15801561087e57600080fd5b505af1158015610892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b69190610bcd565b6108f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ec90610c57565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109449190610fe7565b92505081905550806001600082825461095d9190610fe7565b9250508190555050565b678ac7230489e8000081565b60065481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109cd826109a2565b9050919050565b6109dd816109c2565b81146109e857600080fd5b50565b6000813590506109fa816109d4565b92915050565b600060208284031215610a1657610a1561099d565b5b6000610a24848285016109eb565b91505092915050565b6000819050919050565b610a4081610a2d565b82525050565b6000602082019050610a5b6000830184610a37565b92915050565b6000604082019050610a766000830185610a37565b610a836020830184610a37565b9392505050565b610a9381610a2d565b8114610a9e57600080fd5b50565b600081359050610ab081610a8a565b92915050565b600060208284031215610acc57610acb61099d565b5b6000610ada84828501610aa1565b91505092915050565b6000819050919050565b6000610b08610b03610afe846109a2565b610ae3565b6109a2565b9050919050565b6000610b1a82610aed565b9050919050565b6000610b2c82610b0f565b9050919050565b610b3c81610b21565b82525050565b6000602082019050610b576000830184610b33565b92915050565b610b66816109c2565b82525050565b6000604082019050610b816000830185610b5d565b610b8e6020830184610a37565b9392505050565b60008115159050919050565b610baa81610b95565b8114610bb557600080fd5b50565b600081519050610bc781610ba1565b92915050565b600060208284031215610be357610be261099d565b5b6000610bf184828501610bb8565b91505092915050565b600082825260208201905092915050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b6000610c41600f83610bfa565b9150610c4c82610c0b565b602082019050919050565b60006020820190508181036000830152610c7081610c34565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cb182610a2d565b9150610cbc83610a2d565b925082821015610ccf57610cce610c77565b5b828203905092915050565b7f5374616b696e6720706572696f64206e6f742079657420656e64656400000000600082015250565b6000610d10601c83610bfa565b9150610d1b82610cda565b602082019050919050565b60006020820190508181036000830152610d3f81610d03565b9050919050565b7f4e6f207374616b656420746f6b656e7300000000000000000000000000000000600082015250565b6000610d7c601083610bfa565b9150610d8782610d46565b602082019050919050565b60006020820190508181036000830152610dab81610d6f565b9050919050565b6000610dbd82610a2d565b9150610dc883610a2d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e0157610e00610c77565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e4682610a2d565b9150610e5183610a2d565b925082610e6157610e60610e0c565b5b828204905092915050565b7f5374616b696e6720706572696f64206e6f742073746172746564000000000000600082015250565b6000610ea2601a83610bfa565b9150610ead82610e6c565b602082019050919050565b60006020820190508181036000830152610ed181610e95565b9050919050565b7f5374616b696e6720706572696f6420656e646564000000000000000000000000600082015250565b6000610f0e601483610bfa565b9150610f1982610ed8565b602082019050919050565b60006020820190508181036000830152610f3d81610f01565b9050919050565b7f416d6f756e7420746f6f206c6f77000000000000000000000000000000000000600082015250565b6000610f7a600e83610bfa565b9150610f8582610f44565b602082019050919050565b60006020820190508181036000830152610fa981610f6d565b9050919050565b6000606082019050610fc56000830186610b5d565b610fd26020830185610b5d565b610fdf6040830184610a37565b949350505050565b6000610ff282610a2d565b9150610ffd83610a2d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561103257611031610c77565b5b82820190509291505056fea2646970667358221220479bd23a6ba0510629d6a303b55fc48c67b40f4298b0358ac8c3735ad112b16464736f6c63430008090033";

export class Staking__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _token: string,
    _rewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Staking> {
    return super.deploy(
      _token,
      _rewardAmount,
      overrides || {}
    ) as Promise<Staking>;
  }
  getDeployTransaction(
    _token: string,
    _rewardAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_token, _rewardAmount, overrides || {});
  }
  attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
